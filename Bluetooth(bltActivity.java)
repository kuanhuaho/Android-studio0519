package com.example.blt;(bltActivity.java)

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.content.ContextCompat;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.Manifest;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.le.BluetoothLeScanner;
import android.bluetooth.le.ScanRecord;
import android.bluetooth.le.ScanResult;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.bluetooth.le.ScanCallback;
import java.util.ArrayList;

public class bltActivity extends AppCompatActivity {
    BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
    private static final int REQUEST_COARSE_LOCATION_PERMISSION = 102;
    private static final int REQUEST_ENABLE_BT = 2;
    boolean is_enable = true;
    BluetoothLeScanner mBluetoothLeScanner = mBluetoothAdapter.getBluetoothLeScanner();
    ArrayList<Scan> findDevice = new ArrayList<>();

    @RequiresApi(api = Build.VERSION_CODES.M)
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setTitle("BlueTooth lets go");
        setContentView(R.layout.activity_blt);

        int locationPermission = checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION);
        if (locationPermission != PackageManager.PERMISSION_GRANTED) {
            requestPermissions(
                    new String[]{Manifest.permission.ACCESS_COARSE_LOCATION},
                    REQUEST_COARSE_LOCATION_PERMISSION);
        }

        if(!mBluetoothAdapter.isEnabled()){
         Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
        startActivityForResult(enableBtIntent,REQUEST_ENABLE_BT);
        }

        Button scan_Button = (Button) findViewById(R.id.scan_Button);
        scan_Button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (is_enable == true) {
                    is_enable = false;
                    scan_Button.setText("Stop");
                    //SwitchScan.setChecked(true);
                    boolean on = true;
                    if (on) {
                        mBluetoothLeScanner.startScan(startScanCallback);
                    }
                } else {
                    is_enable = true;
                    scan_Button.setText("Scan");
                    boolean on = false;
                    if (!on) {
                        mBluetoothLeScanner.stopScan(startScanCallback);
                    }
                }
            }
        });


        }



    // Disable back button
    @Override
    public void onBackPressed() {

        moveTaskToBack(false);
    }

    private final ScanCallback startScanCallback = new ScanCallback() {
        @Override
        public void onScanResult(int callbackType, ScanResult result) {
            BluetoothDevice device = result.getDevice();
            ScanRecord mScanRecord = result.getScanRecord();
            String address = device.getAddress();
            byte[] content = mScanRecord.getBytes();
            int mRssi = result.getRssi();
        }
        /*@Override
        public boolean equals(@Nullable Object obj) {
            Scan p = (Scan)obj;

            return address.equals(p.address);
        }

        @NonNull
        @Override
        public String toString() {
            return address;
        }*/
    };

}
